using System;
using NUnit.Framework;

namespace NHS111.Models.Test.Models.Web.ServiceViewModelTests
{
    [TestFixture]
    public class IsOpenTests
    {
        private readonly ServiceViewModelTestHelper _serviceViewModelTestHelper = new ServiceViewModelTestHelper();

        [Test]
        public void IsOpen_Returns_True_When_Service_Open_All_Hours()
        {
            var service = new NHS111.Models.Models.Web.ServiceViewModel()
            {
                OpenAllHours = true,
            };

            Assert.IsTrue(service.IsOpen);
        }

        [Test]
        public void IsOpen_Returns_True_When_Service_Is_Open()
        {
            var clock = new StaticClock(DayOfWeek.Monday, 10, 37);
            var service = new NHS111.Models.Models.Web.ServiceViewModel(clock)
            {
                OpenAllHours = false,
                RotaSessions = new[]
                {
                    _serviceViewModelTestHelper.MONDAY_SESSION,
                    _serviceViewModelTestHelper.TUESDAY_SESSION,
                    _serviceViewModelTestHelper.WEDNESDAY_SESSION,
                    _serviceViewModelTestHelper.THURSDAY_SESSION,
                    _serviceViewModelTestHelper.FRIDAY_SESSION,
                    _serviceViewModelTestHelper.SATURDAY_SESSION,
                    _serviceViewModelTestHelper.SUNDAY_SESSION
                }
            };

            Assert.IsTrue(service.IsOpen);
        }

        [Test]
        public void IsOpen_Returns_False_When_Service_Is_Closed()
        {
            var clock = new StaticClock(DayOfWeek.Monday, 8, 2);
            var service = new NHS111.Models.Models.Web.ServiceViewModel(clock)
            {
                OpenAllHours = false,
                RotaSessions = new[]
                {
                    _serviceViewModelTestHelper.MONDAY_SESSION,
                    _serviceViewModelTestHelper.TUESDAY_SESSION,
                    _serviceViewModelTestHelper.WEDNESDAY_SESSION,
                    _serviceViewModelTestHelper.THURSDAY_SESSION,
                    _serviceViewModelTestHelper.FRIDAY_SESSION,
                    _serviceViewModelTestHelper.SATURDAY_SESSION,
                    _serviceViewModelTestHelper.SUNDAY_SESSION
                }
            };

            Assert.IsFalse(service.IsOpen);
        }

        [Test]
        public void IsOpen_Returns_False_When_Service_Has_No_Rota_Sessions()
        {
            var clock = new StaticClock(DayOfWeek.Sunday, 16, 2);
            var service = new NHS111.Models.Models.Web.ServiceViewModel(clock)
            {
                OpenAllHours = false,
            };

            Assert.IsFalse(service.IsOpen);
        }

        [Test]
        public void IsOpen_Returns_False_When_Service_Has_No_Rota_Session_For_Today()
        {
            var clock = new StaticClock(DayOfWeek.Saturday, 12, 35);
            var service = new NHS111.Models.Models.Web.ServiceViewModel(clock)
            {
                OpenAllHours = false,
                RotaSessions = new[]
                {
                    _serviceViewModelTestHelper.MONDAY_SESSION,
                    _serviceViewModelTestHelper.TUESDAY_SESSION,
                    _serviceViewModelTestHelper.WEDNESDAY_SESSION,
                    _serviceViewModelTestHelper.THURSDAY_SESSION,
                    _serviceViewModelTestHelper.FRIDAY_SESSION
                }
            };

            Assert.IsFalse(service.IsOpen);
        }
    }
}
