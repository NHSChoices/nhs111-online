@using NHS111.Models.Models.Domain
@using NHS111.Models.Models.Web
@using NHS111.Models.Models.Web.Enums
@{ Layout = "~/Views/Shared/_LayoutNhsUk.cshtml"; }
@inherits NHS111.Web.Views.Shared.DirectLinkingView<QuestionViewModel>


@section Title  {NHS 111 Online - @Model.TitleWithoutBullets}


@section HeadTop {
    @{
        var url = string.Format("/{0}/{1}/{2}/", Url.Encode(Model.PathwayId), Url.Encode(Model.PathwayTitle), Url.Encode(Model.QuestionNo));
    }

    <script>
        var pageId = '@Model.PathwayId';
        dataLayer = [
            {
                'virtualPageUrl': document.location.pathname + '@url',
                'virtualPageTitle': '@Model.TitleWithoutBullets'
            }];
    </script>
}

@section FeedbackSection {
@Html.Partial("_FeedbackDetails", new FeedbackViewModel() {
    UserId = Model.SessionId.ToString(),
    PageData = new PageDataViewModel(Model.IsFirstStep ? PageDataViewModel.PageType.FirstQuestion : PageDataViewModel.PageType.Question, Model),
    Heading = "Help us improve this question",
    Paragraph = "Does it make sense? Do you understand all the words?"
})
}

@functions {

    string WriteDirectLink(JourneyViewModel model)
    {
        if (DirectLinkingFeature.IsEnabled)
        {
            return "<!-- DIRECT LINK: " + model.StepLink + " -->";
        }

        return "";
    }

}

@using (Html.BeginForm("Navigation", "Question", FormMethod.Post))
{
    @Html.HiddenFor(x => Model.SessionId)
    @Html.HiddenFor(x => Model.JourneyId)
    @Html.HiddenFor(x => Model.Id)
    @Html.HiddenFor(x => Model.JourneyJson)
    @Html.HiddenFor(x => Model.PathwayId)
    @Html.HiddenFor(x => Model.PathwayNo)
    @Html.HiddenFor(x => Model.PathwayTitle)
    @Html.HiddenFor(x => Model.EntrySearchTerm)
    @Html.HiddenFor(x => Model.DigitalTitle)
    @Html.HiddenFor(x => Model.UserInfo.Demography.Age)
    @Html.HiddenFor(x => Model.UserInfo.Demography.Gender)
    @Html.HiddenFor(x => Model.CurrentPostcode)
    @Html.HiddenFor(x => Model.Title)
    @Html.HiddenFor(x => Model.SymptomDiscriminatorCode)
    @Html.HiddenFor(x => Model.QuestionNo)
    @Html.HiddenFor(x => Model.StateJson)
    @Html.HiddenFor(x => Model.FilterServices)
    @Html.HiddenFor(x => Model.Campaign)
    @Html.HiddenFor(x => Model.Source)

    @Html.Raw(WriteDirectLink(Model))

    for (int i = 0; i < Model.CollectedKeywords.Keywords.Count; i++)
    {
        @Html.HiddenFor(model => Model.CollectedKeywords.Keywords[i].Value)
        @Html.HiddenFor(model => Model.CollectedKeywords.Keywords[i].IsFromAnswer)
    }

    for (int i = 0; i < Model.CollectedKeywords.ExcludeKeywords.Count; i++)
    {
        @Html.HiddenFor(model => Model.CollectedKeywords.ExcludeKeywords[i].Value)
        @Html.HiddenFor(model => Model.CollectedKeywords.ExcludeKeywords[i].IsFromAnswer)
    }
    <div class="form-group measure @(@ViewData.ModelState.IsValidField("SelectedAnswer") ? "" : "form-group-error")">
        <fieldset>
            <legend>
                <h1>@Model.TitleWithoutBullets</h1>
                @Html.HiddenFor(m => m.TitleWithoutBullets)
            </legend>
            @Html.ValidationMessageFor(m => m.SelectedAnswer, "Please select an answer", new { @class = "error-message" })
            @if (!String.IsNullOrWhiteSpace(Model.Rationale)) {
                <div class="callout callout--info">
                    <p>@Html.Raw(@Model.RationaleHtml)</p>
                </div>
            }

            @for(var i=0;i < Model.OrderedAnswers().Count; i++)
            {
                var answer = Model.OrderedAnswers()[i];
                <div class="multiple-choice">
                    <input name="SelectedAnswer" data-val="true" data-val-required="'SelectedAnswer' should not be empty." type="radio" class="multiple-choice__input" id="@answer.TitleWithoutSpaces" value="@Newtonsoft.Json.JsonConvert.SerializeObject(answer)" />
                    <label for="@answer.TitleWithoutSpaces" class="multiple-choice--radio">@answer.Title</label>
                    @Html.Hidden(string.Format("Answers[{0}].Title", i), answer.Title)
                    @Html.Hidden(string.Format("Answers[{0}].TitleWithoutSpaces", i), answer.TitleWithoutSpaces)
                    @Html.Hidden(string.Format("Answers[{0}].SymptomDiscriminator", i), answer.SymptomDiscriminator)
                    @Html.Hidden(string.Format("Answers[{0}].SupportingInformation", i), answer.SupportingInformation)
                    @Html.Hidden(string.Format("Answers[{0}].Keywords", i), answer.Keywords)
                    @Html.Hidden(string.Format("Answers[{0}].ExcludeKeywords", i), answer.ExcludeKeywords)
                    @Html.Hidden(string.Format("Answers[{0}].ReportText", i), answer.ReportText)
                    @Html.Hidden(string.Format("Answers[{0}].DispositionDisplayText", i), answer.DispositionDisplayText)
                    @Html.Hidden(string.Format("Answers[{0}].Order", i), answer.Order)
                    @if (!String.IsNullOrWhiteSpace(answer.SupportingInformation))
                    {
                        @Html.Partial("_HiddenText", new HiddenTextViewModel() {Summary = "What does this mean?", Details = new[] {Html.Encode(@Html.Raw(answer.SupportingInformationHtml))}})
                    }


                    @if (Model.QuestionNo == "TX1039" && answer.Order < 3)
                    {
                        <div class="interrupt--mini callout--warning" style="margin-top: 17px;">
                            This means you’ll be asked to call 999
                        </div>
                    }
                </div>
            }
        </fieldset>
    </div>
    <button class="button--next" id="nextScreen" type="submit" name="Question" value="Question">Next question</button>
    if (!Model.IsFirstStep)
    {
        <button class="button--stacked button--previous button--link" id="previousScreen" type="submit" value="PreviousQuestion" name="PreviousQuestion" formnovalidate>Change my previous answer</button>
    }
}

@if (Model.QuestionNo == "TX1039")
{

    <style>
        /* This is for the 999 callout experiment, should be moved to frontend kit or removed */
        .interrupt--mini {
            display: none;
            position: relative;
            clear: both;
            margin: 12px 0 20px 0;
            padding: 8px;
            border-width: 4px;
        }

        input:checked ~ .interrupt--mini {
            display: block;
        }

        .interrupt--mini:before {
            content: ' ';
            position: absolute;
            left: 4px;
            top: -16px;
            width: 0;
            height: 0;
            border-style: solid;
            border-width: 0 12px 16px 12px;
            border-color: transparent transparent #fada8b transparent;
        }
    </style>
}

@Html.Partial("_PageLoadingIndicator")
<script type="text/javascript">

    const formToJSON = elements => [].reduce.call(elements, (data, element) => {

        if (element.type != "radio") data[element.name] = element.value;
        else if (element.checked) data[element.name] = element.value;
        return data;

        }, {});

    const form = $('form')[0];

    $(".button--next").on("click",
        function () {

            var prePopulatedDosResultsOutcomeGroups = [@(Html.Raw(String.Join(",",OutcomeGroup.PrePopulatedDosResultsOutcomeGroups.Select(og => "\"" + og.Id + "\"").ToList())))];
            $.ajax({
                    method: "POST",
                    url: "/question/NextNodeDetails",
                    data: formToJSON(form.elements)
                })
                .done(function(data) {
                    if (data.NodeType == @((int)NodeType.Outcome) && '@Model.CurrentPostcode' != '' &&
                        prePopulatedDosResultsOutcomeGroups.indexOf(data.OutcomeGroup.Id) > -1) {
                        startPageLoadingIndicator('Searching for services near to  @Model.FormattedCurrentPostcode ...');
                    }
                });
        });







</script>
