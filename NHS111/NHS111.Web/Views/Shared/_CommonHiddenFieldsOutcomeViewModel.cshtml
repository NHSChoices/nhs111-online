@model NHS111.Models.Models.Web.OutcomeViewModel

@Html.HiddenFor(x => Model.SessionId)
@Html.HiddenFor(x => Model.JourneyId)
@Html.HiddenFor(x => Model.Id)
@Html.HiddenFor(x => Model.JourneyJson)
@Html.HiddenFor(x => Model.PathwayId)
@Html.HiddenFor(x => Model.PathwayNo)
@Html.HiddenFor(x => Model.PathwayTitle)
@Html.HiddenFor(x => Model.EntrySearchTerm)
@Html.HiddenFor(x => Model.DigitalTitle)
@Html.HiddenFor(x => Model.SymptomGroup)
@Html.HiddenFor(x => Model.FilterServices)
@Html.HiddenFor(x => Model.UserInfo.Demography.Age)
@Html.HiddenFor(x => Model.UserInfo.Demography.Gender)
@Html.HiddenFor(x => Model.SymptomDiscriminatorCode)
@Html.HiddenFor(x => Model.Title)
@Html.HiddenFor(x => Model.UserInfo.CurrentAddress.Postcode)
@Html.HiddenFor(x => Model.StateJson)
@Html.HiddenFor(x => Model.TimeFrameText)
@Html.HiddenFor(x => Model.DispositionUrgencyText)
@Html.HiddenFor(x => Model.SymptomDiscriminator.ReasoningText)
@Html.HiddenFor(x => Model.OutcomeGroup.Id)
@Html.HiddenFor(x => Model.OutcomeGroup.Text)
@Html.HiddenFor(x => x.TimeFrameMinutes)
@Html.HiddenFor(x => x.WaitTimeText)
@Html.HiddenFor(x => x.DispositionTime)
@Html.HiddenFor(x => x.SurveyLink.PathwayNo)
@Html.HiddenFor(x => x.SurveyLink.EndPathwayNo)
@Html.HiddenFor(x => x.SurveyLink.EndPathwayTitle)
@Html.HiddenFor(x => x.SurveyLink.DigitalTitle)
@Html.HiddenFor(x => x.SurveyLink.DispositionCode)
@Html.HiddenFor(x => x.SurveyLink.JourneyId)
@Html.HiddenFor(x => x.SurveyLink.DispositionDateTime)
@Html.HiddenFor(x => x.SelectedService.Id)
@Html.HiddenFor(x => Model.Campaign)
@Html.HiddenFor(x => Model.Source)
    
@if (Model.DosCheckCapacitySummaryResult.Success != null)
{
    for (var i = 0; i < Model.DosCheckCapacitySummaryResult.Success.Services.Count(); ++i)
    {    @Html.Hidden(string.Format("DosCheckCapacitySummaryResult.Success.Services[{0}].Name", i), @WebUtility.HtmlDecode(Model.DosCheckCapacitySummaryResult.Success.Services[i].Name))
        @Html.HiddenFor(m => Model.DosCheckCapacitySummaryResult.Success.Services[i].Id)
    
        @Html.Hidden(string.Format("DosCheckCapacitySummaryResult.Success.Services[{0}].Address", i), @WebUtility.HtmlDecode(Model.DosCheckCapacitySummaryResult.Success.Services[i].Address))
        @Html.HiddenFor(m => Model.DosCheckCapacitySummaryResult.Success.Services[i].OdsCode)
        @Html.HiddenFor(m => Model.DosCheckCapacitySummaryResult.Success.Services[i].PostCode)
        @Html.HiddenFor(m => Model.DosCheckCapacitySummaryResult.Success.Services[i].OpenAllHours)
        if (Model.DosCheckCapacitySummaryResult.Success.Services[i].RotaSessions != null)
        {
            for (var j = 0; j < Model.DosCheckCapacitySummaryResult.Success.Services[i].RotaSessions.Length; j++)
            {
                @Html.HiddenFor(m => m.DosCheckCapacitySummaryResult.Success.Services[i].RotaSessions[j].StartDayOfWeek)
                @Html.HiddenFor(m => m.DosCheckCapacitySummaryResult.Success.Services[i].RotaSessions[j].StartTime.Hours)
                @Html.HiddenFor(m => m.DosCheckCapacitySummaryResult.Success.Services[i].RotaSessions[j].StartTime.Minutes)
                @Html.HiddenFor(m => m.DosCheckCapacitySummaryResult.Success.Services[i].RotaSessions[j].EndDayOfWeek)
                @Html.HiddenFor(m => m.DosCheckCapacitySummaryResult.Success.Services[i].RotaSessions[j].EndTime.Hours)
                @Html.HiddenFor(m => m.DosCheckCapacitySummaryResult.Success.Services[i].RotaSessions[j].EndTime.Minutes)
            }
        }
    }
}
@Html.HiddenFor(m => m.SurgeryViewModel.SelectedSurgery)

@for (int i = 0; i < Model.CollectedKeywords.Keywords.Count; i++)
{
    @Html.HiddenFor(model => Model.CollectedKeywords.Keywords[i].Value)
    @Html.HiddenFor(model => Model.CollectedKeywords.Keywords[i].IsFromAnswer)
}

    @for (int i = 0; i < Model.CollectedKeywords.ExcludeKeywords.Count; i++)
    {
        @Html.HiddenFor(model => Model.CollectedKeywords.ExcludeKeywords[i].Value)
        @Html.HiddenFor(model => Model.CollectedKeywords.ExcludeKeywords[i].IsFromAnswer)
    }




